{{setTitle     "Tools"}}
{{setSubTitle  "Write, manipulate, and do more with CSS."}}
{{setActiveNav "tools"}}

{{> header}}

<div class="content">
    {{sectionHeading "Installing Pure with npm"}}

    <p>
        You can add Pure to your project through <a href="https://www.npmjs.com/">npm</a>. This is our recommended way to to integrate Pure into your project's build process and tool chain.
    </p>

  {{#code "shell"}}
    $ npm install purecss --save
  {{/code}}

    <p>
        {{code "require('purecss')"}} will load an object with the following methods:
    </p>

    <ul>
        <li>{{code "getFile(name)"}}</li> &ndash; Retrieve contents of a Pure module file.
        <li>{{code "getFilePath(name)"}}</li> &ndash; Return full path to a Pure file.
    </ul>

    {{sectionHeading "Installing Pure with Bower"}}

    <p>
        You can add Pure to your project through <a href="http://bower.io">Bower</a>. This works great if your website is SSL-encrypted.
    </p>

  {{#code "shell"}}
    $ bower install pure --save
  {{/code}}


  {{sectionHeading "Installing Pure with Composer"}}

  <p>
      You can also install Pure with <a href="https://getcomposer.org/">Composer</a>.
  </p>

 {{#code "shell"}}
  $ composer require pure-css/purecss
 {{/code}}


    {{sectionHeading "Extending Pure with Grunt"}}

    <p>
        We've written several tools that help you extend Pure and integrate it with your project's CSS. These tools are available as <b><a href="http://gruntjs.com">Grunt</a></b> plugins that can easily be integrated into your existing {{code "Gruntfile.js"}}.
    </p>

    <aside>
        <p>
            If you haven't used Grunt before, it's very easy to set up. Just head over to the <a href="http://gruntjs.com/getting-started">Getting Started</a> page to learn more.
        </p>
    </aside>


    {{sectionHeading "Extending Pure with Rework"}}

    <p>
        We've taken a layered approach to developing Pure's tooling. Most of the tools are first built as <b><a href="https://github.com/reworkcss/rework">Rework</a></b> plugins. This allows you to compose Pure's Rework plugins together with other Rework plugins. It also allows the Grunt plugins to be written as <em>very thin</em> wrappers.
    </p>


    {{sectionHeading "Generating Custom Responsive Grids"}}

    <p>
        Pure was created to help developer's build mobile-first responsive web projects. However, since CSS Media Queries cannot be over-written via CSS, you can use Pure's tooling to customize Pure's Responsive Grids for your project.
    </p>

    <h3>Via Grunt</h3>

    <p>
        Install the <a href="https://www.npmjs.org/package/grunt-pure-grids">Pure Grids Grunt Plugin</a> through npm.
    </p>

  {{#code "shell"}}
    $ npm install grunt-pure-grids --save-dev
  {{/code}}

    <p>
        Next, add it to your {{code "Gruntfile.js"}}.
    </p>

  {{#code "js"}}
    grunt.loadNpmTasks('grunt-pure-grids');
  {{/code}}

    <p>
        Finally, add the necessary configuration through the {{code "pure_grids"}} task. To see a full list of all configurable properties, check out the <a href="https://www.npmjs.org/package/grunt-pure-grids#readme">README documentation</a>.
    </p>

{{#code "js"}}
grunt.initConfig({
    pure_grids: {
        dest : 'build/public/css/main-grid.css',

        options: {
            units: 12, // 12-column grid

            mediaQueries: {
                sm: 'screen and (min-width: 35.5em)', // 568px
                md: 'screen and (min-width: 48em)',   // 768px
                lg: 'screen and (min-width: 64em)',   // 1024px
                xl: 'screen and (min-width: 80em)'    // 1280px
            }
        }
    }
});
{{/code}}

    <h3>Via Rework</h3>

    <p>
        If you're not using Grunt, you can also generate your custom responsive grids through using the <a href="https://www.npmjs.org/package/rework-pure-grids">Pure Grids Rework Plugin</a>. It has the same configuration options as the Grunt plugin &mdash; in fact, this is what powers the Grunt plugin.
    </p>

    <p>
        You can install the Rework plugin through npm.
    </p>

  {{#code "shell"}}
    $ npm install rework rework-pure-grids
  {{/code}}

    <p>
        And it can be used on it's own like this, or along side other Rework plugins you might be using.
    </p>

{{#code "js"}}
var rework    = require('rework'),
    pureGrids = require('rework-pure-grids');

var css = rework('').use(pureGrids.units({
    mediaQueries: {
        sm: 'screen and (min-width: 35.5em)', // 568px
        md: 'screen and (min-width: 48em)',   // 768px
        lg: 'screen and (min-width: 64em)',   // 1024px
        xl: 'screen and (min-width: 80em)'    // 1280px
    }
})).toString();

console.log(css); // This will log-out the grid CSS.
{{/code}}


    {{sectionHeading "Adapting Mobile-first Designs for Old Browsers"}}

    <p>
        Developing your web project from a mobile-first perspective has benefits:
    </p>

    <ul>
        <li>
            <p>
                CSS rules are easier to add than to remove, so it makes sense to start from the smallest and simplest layout, and add styles for larger screens.
            </p>
        </li>
        <li>
            <p>
                Forces you to think about your most important content, instead of shoe-horning desktop experiences into small screens.
            </p>
        </li>
    </ul>

    <p>
        However, one of the problems with mobile-first designs is that old browsers that don't support CSS Media Queries (such as IE 8) get a mobile-phone experience, which looks odd on a big screen.
    </p>

    <p>
        To solve this, we helped develop the <a href="https://www.npmjs.org/package/grunt-stripmq">Strip MQ Grunt Plugin</a>. By using this Grunt plugin, you're able to write mobile-first CSS, while ensuring that users on IE 8 and below get to view the desktop experience. It's the best of both worlds!
    </p>

    <h3>Via Grunt</h3>

    <p>
        Install the <a href="https://www.npmjs.org/package/grunt-stripmq">Strip MQ Grunt Plugin</a> through npm.
    </p>

  {{#code "shell"}}
    $ npm install grunt-stripmq --save-dev
  {{/code}}

    <p>
        Next, add the Grunt task to your {{code "Gruntfile.js"}}
    </p>

  {{#code "js"}}
    grunt.loadNpmTasks('grunt-stripmq');
  {{/code}}

    <p>
        Add the necessary configuration through the {{code "stripmq"}} task. Check out the <a href="https://www.npmjs.org/package/grunt-stripmq#readme">README documentation</a> for a full list of available options.
    </p>

{{#code "js"}}
grunt.initConfig({
    stripmq: {
        all: {
            files: {
                // Takes the input file `grid.css`, and generates `grid-old-ie.css`.
                'css/grid-old-ie.css': ['css/grid.css'],

                // Takes the input file `app.css`, and generates `app-old-ie.css`.
                'css/app-old-ie.css': ['css/app.css']
            }
        }
    }
});
{{/code}}

    <p>
        Finally, you'll need to add this block in your {{code "<head>"}} to let old IE browsers request the generated CSS files.
    </p>

{{#code "html"}}
<!--[if lt IE 9]>
    <link rel="stylesheet" href="css/grid-old-ie.css">
    <link rel="stylesheet" href="css/app-old-ie.css">
<![endif]-->
<!--[if gt IE 8]><!-->
    <link rel="stylesheet" href="css/grid.css">
    <link rel="stylesheet" href="css/app.css">
<!--<![endif]-->
{{/code}}


    {{sectionHeading "Mutating Selectors"}}

    <p>
        All selectors defined in Pure's source code begin with the {{code ".pure-"}} prefix. However, you may want to change this. To accomplish this task, you can use Pure's tooling to mutate CSS selectors.
    </p>

    <h3>Via Grunt</h3>

    <p>
        Install the <a href="https://www.npmjs.org/package/grunt-css-selectors">CSS Selectors Grunt Plugin</a> through npm.
    </p>

  {{#code "shell"}}
    $ npm install grunt-css-selectors --save-dev
  {{/code}}

    <p>
        Once it's installed, add the task to your {{code "Gruntfile.js"}}
    </p>

  {{#code "js"}}
    grunt.loadNpmTasks('grunt-css-selectors');
  {{/code}}

    <p>
        Finally, add the necessary configuration through the {{code "css_selectors"}} task. Check out the <a href="https://www.npmjs.org/package/grunt-css-selectors#readme">README documentation</a> for more details.
    </p>

{{#code "js"}}
grunt.initConfig({
    css_selectors: {
        options: {
            mutations: [
                {prefix: '.foo'}
            ]
        },

        files: {
            'dest/foo-prefixed.css': ['src/foo.css'],
        }
    }
});
{{/code}}

    <h3>Via Rework</h3>

    <p>
        If you're not using Grunt, you can also mutate CSS selectors using the <a href="https://www.npmjs.org/package/rework-mutate-selectors">Mutate Selectors Rework Plugin</a>. It has a similar interface to the Grunt plugin &mdash; in fact, this is what powers the Grunt plugin.
    </p>

    <p>
        You can install the Rework plugin through npm.
    </p>

  {{#code "shell"}}
    $ npm install rework rework-mutate-selectors
  {{/code}}

    <p>
        And it can be used on it's own like this, or along side other Rework plugins you might be using.
    </p>

{{#code "js"}}
var rework    = require('rework'),
    selectors = require('rework-mutate-selectors');

var css = rework(inputCSS)
    .use(selectors.prefix('.foo'))
    .use(selectors.replace(/^\.pure/g, '.bar'))
    .toString();

console.log(css); // This will log-out the resulting CSS.
{{/code}}


    <aside>
        <p>
            If you have questions or run into issues while these tools, please file them on their respective GitHub repositories.
        </p>
    </aside>
</div>
